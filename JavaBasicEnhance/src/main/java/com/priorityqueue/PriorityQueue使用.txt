1. PriorityQueue上的几个要点。
PriorityQueue是一个无限制的队列，并且动态增长。默认初始容量'11'可以使用相应构造函数中的initialCapacity参数覆盖。
它不允许NULL对象。
添加到PriorityQueue的对象必须具有可比性。
默认情况下，优先级队列的对象按自然顺序排序。
比较器可用于队列中对象的自定义排序。
优先级队列的头部是基于自然排序或基于比较器的排序的最小元素。当我们轮询队列时，它从队列中返回头对象。
如果存在多个具有相同优先级的对象，则它可以随机轮询其中任何一个。
PriorityQueue 不是线程安全的。PriorityBlockingQueue在并发环境中使用。
它为add和poll方法提供了O（log（n））时间。


2. Java PriorityQueue构造函数
PriorityQueue（）：使用默认初始容量（11）构造空队列，默认是最小堆。
PriorityQueue（Collection c）：构造包含指定集合中元素的空队列。
PriorityQueue（int initialCapacity）：构造具有指定初始容量的空队列，该容量根据其自然顺序对其元素进行排序。
PriorityQueue（int initialCapacity，Comparator comparator）：构造具有指定初始容量的空队列，该容量根据指定的比较器对其元素进行排序。
PriorityQueue（PriorityQueue c）：构造包含指定优先级队列中元素的空队列。
PriorityQueue（SortedSet c）：构造包含指定有序集合中元素的空队列。

3. Java PriorityQueue方法
PriorityQueue类下面给出了重要的方法，你应该知道。
boolean add（object）：将指定的元素插入此优先级队列。
boolean offer（object）：将指定的元素插入此优先级队列。
boolean remove（object）：从此队列中删除指定元素的单个实例（如果存在）。
Object poll（）：检索并删除此队列的头部，如果此队列为空，则返回null。
Object element（）：检索但不删除此队列的头部，如果此队列为空，则返回null。
Object peek（）：检索但不删除此队列的头部，如果此队列为空，则返回null。
void clear（）：从此优先级队列中删除所有元素。
Comparator comparator（）：返回用于对此队列中的元素进行排序的比较器，如果此队列根据其元素的自然顺序排序，则返回null。
boolean contains（Object o）：如果此队列包含指定的元素，则返回true。
Iterator iterator（）：返回此队列中元素的迭代器。
int size（）：返回此队列中的元素数。
Object [] toArray（）：返回包含此队列中所有元素的数组。
